DEFINE Elevator
    ID: id
    SET Nbr_Elevators to 2 //number of elevators
    SET Nbr_Floors to 10 //number of floors
    SET Nbr_Columns to 1 
    SET FloorList equal to List
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10
    SET Status to false //idle
    SET Door to false //closed
    ENDSEQUENCE
ENDDEFINE

DEFINE User
    SET Nbr_Users to 0
    INIT User_Direction //Up or down
    INIT User_Position //the floor where button is pressed
ENDDEFINE

DEFINE Columns USING id, Nbr_Elevators, Nbr_Floors, FloorList
    ID: id
    Nbr_Elevators: nbr_elevators
    Nbr_Floors: nbr_floors
    ElevatorList: SET to EMPTY List
    FloorList: List
    SEQUENCE CreateElevatorList USING nbr_elevators
    SET 
    INIT Points to 0
    INIT Elevator_Direction
ENDDEFINE

SEQUENCE Elevator
    INIT Btn_Count to 0 //the number of buttons outside pressed
    INIT Elevator_Position to 1 //the floor where the elevator is
    INIT Button_Pressed to false
    IF Button_Pressed = true THEN
        CALL SEQUENCE Elevator_Priority
        CALL SEQUENCE Elevator_Direction_Priority
        CALL SEQUENCE Moving
ENDSEQUENCE 

SEQUENCE Moving
    READ User_Position //check on which floor button is pressed
        IF Elevator_Position smaller than User_Position THEN
            Elevator_Position INCREMENT by 1  //move elevator to floor where button is pressed
        ELSE IF Elevator_Position greater than User_Position THEN
            Elevator_Position INCREMENT by -1  //move elevator to floor where button is pressed
        ENDIF
ENDSEQUENCE

SEQUENCE Door
    IF Button_Pressed = true
        WHEN Elevator_Position equal User_Position   
            SET Door = true //Open Door
    ELSE
            SET Door = false
    ENDIF
ENDSEQUENCE

SEQUENCE Wait //door will wait 5 seconds before closing
    INIT Timer = 0
    IF Door = true
        REPEAT 
            Timer INCREMENT by 1
        UNTIL Timer smaller than 5    
ENDSEQUENCE

SEQUENCE Floor_Requested // Number of button/floor pressed
    IF Button_Nbr greater than Elevator_Position THEN
        CALL SEQUENCE Move_Up
    ELSE IF Button_Nbr smaller than Elevator_Position THEN
        CALL SEQUENCE Move_Down
    ELSE CALL SEQUENCE Door
    ENDIF
ENDSEQUENCE

SEQUENCE Move_Up
    READ Button_Nbr //check which number button is pressed
        WHILE Button_Nbr greater than Elevator_Position
            Elevator_Position INCREMENT by 1 //move elevator to floor where button is pressed

ENDSEQUENCE

SEQUENCE Move_Down
    READ Button_Nbr //check which number button is pressed
        WHILE Button_Nbr smaller than Elevator_Position
            Elevator_Position INCREMENT by -1  //move elevator to floor where button is pressed
ENDSEQUENCE

SEQUENCE Elevator_Priority
    IF Abosute value of (Elevator_Position minus User_Position) is smaller than 
            Abosulute Value of (Elevator_Two minus User_Position)
        CALL SEQUENCE Elevator_One
    ELSE IF Aboslute Value of (Elevator_Position minus User_Position) greater than
            Abosute Value of (Elevator_Two minus User_Position)
        CALL SEQUENCE Elevator_Two
    ELSE 
        CALL SEQUENCE Elevator_One
ENDSEQUENCE

SEQUENCE Elevator_Direction_Priority
    CASE User_Position smaller than Elevator_Position
            AND User_Direction equal UP AND Elevator_Direction equal UP:
        CALL SEQUENCE Move_Up
         User_Position greater than Elevator_Position
            AND User_Direction equal DOWN AND Elevator_Direction equal DOWN:
        CALL SEQUENCE Move_Down
    ENDCASE
ENDSEQUENCE

SEQUENCE Elevator_One
    CALL SEQUENCE Elevator
ENDSEQUENCE